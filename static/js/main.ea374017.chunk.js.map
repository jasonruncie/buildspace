{"version":3,"sources":["assets/jason_runcie.gif","App.js","index.js"],"names":["SystemProgram","web3","Keypair","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","solanaFound","setSolanaFound","inputValue","setInputValue","ambigramList","setAmbigramList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","response","publicKey","toString","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendAmbigramRequest","length","addGif","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","gifList","className","alt","src","jrLogo","width","onClick","href","rel","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","gifLink","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea374017.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/jason_runcie.bf37fb9f.gif\";","import { useEffect, useState } from 'react';\nimport idl from './idl.json';\nimport jrLogo from './assets/jason_runcie.gif';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport {\n    Program, Provider, web3\n} from '@project-serum/anchor';\nimport kp from './keypair.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = Keypair.fromSecretKey(secret)\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n    preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n//Buildspace https://www.arweave.net/ypQasujRp66D0SKV_xHordmrz-qCt_PlixgyzFLUwJA\n//Metaplex   https://www.arweave.net/BngVsyYASFLTn_-AJzEDBN2UkSoMF2l51_jzWXUH-Hs\n\nconst App = () => {\n\n    const [walletAddress, setWalletAddress] = useState(null);\n    const [solanaFound, setSolanaFound] = useState(false);\n    // const [triedConnect, setTriedConnect] = useState(false);\n\n    const [inputValue, setInputValue] = useState('');\n    const [ambigramList, setAmbigramList] = useState([]);\n\n    const checkIfWalletIsConnected = async () => {\n        try {\n            const { solana } = window;\n\n            if (solana) {\n                setSolanaFound(true);\n                if (solana.isPhantom) {\n                    console.log('Phantom wallet found!');\n                    /*\n                    * The solana object gives us a function that will allow us to connect\n                    * directly with the user's wallet!\n                    */\n                    const response = await solana.connect({});\n                    console.log(\n                        'Connected with Public Key:',\n                        response.publicKey.toString()\n                    );\n                    setWalletAddress(response.publicKey.toString());\n\n                }\n            } else {\n\n                //alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n            }\n        } catch (error) {\n\n            console.error('hmm', error);\n        }\n    };\n\n    /*\n     * Let's define this method so our code doesn't break.\n     * We will write the logic for this next!\n     */\n    const connectWallet = async () => {\n        const { solana } = window;\n\n        if (solana) {\n            const response = await solana.connect();\n            console.log('Connected with Public Key:', response.publicKey.toString());\n            setWalletAddress(response.publicKey.toString());\n        }\n    };\n    const onInputChange = (event) => {\n        const { value } = event.target;\n        setInputValue(value);\n    }\n\n    const getProvider = () => {\n        const connection = new Connection(network, opts.preflightCommitment);\n        const provider = new Provider(\n            connection, window.solana, opts.preflightCommitment,\n        );\n        return provider;\n    }\n    const createGifAccount = async () => {\n        try {\n            const provider = getProvider();\n            const program = new Program(idl, programID, provider);\n            console.log(\"ping\")\n            await program.rpc.startStuffOff({\n                accounts: {\n                    baseAccount: baseAccount.publicKey,\n                    user: provider.wallet.publicKey,\n                    systemProgram: SystemProgram.programId,\n                },\n                signers: [baseAccount]\n            });\n            console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n            await getGifList();\n\n        } catch (error) {\n            console.log(\"Error creating BaseAccount account:\", error)\n        }\n    }\n\n    const sendAmbigramRequest = async () => {\n        if (inputValue.length === 0) {\n          console.log(\"No Ambigram Request given!\")\n          return\n        }\n        console.log('Ambigram Request:', inputValue);\n        try {\n          const provider = getProvider();\n          const program = new Program(idl, programID, provider);\n      \n          await program.rpc.addGif(inputValue, {\n            accounts: {\n              baseAccount: baseAccount.publicKey,\n              user: provider.wallet.publicKey,\n            },\n          });\n          console.log(\"Ambigram Request sucesfully sent to program\", inputValue)\n      \n          await getGifList();\n        } catch (error) {\n          console.log(\"Error sending Ambigram Request:\", error)\n        }\n      };\n    /*\n     * We want to render this UI when the user hasn't connected\n     * their wallet to our app yet.\n     */\n    const renderNotConnectedContainer = () => (\n        <div>\n            <button\n                className=\"cta-button connect-wallet-button\"\n                onClick={connectWallet}\n            >\n                Connect to Wallet\n            </button>\n\n            <h3>{solanaFound ? '' : <a href=\"https://phantom.app/\" target=\"_blank\" rel=\"noreferrer\">Get Phantom</a>}</h3>\n        </div>\n    );\n\n    const renderConnectedContainer = () => {\n        // If we hit this, it means the program account hasn't be initialized.\n        if (ambigramList === null) {\n            return (\n                <div className=\"connected-container\">\n                    <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n                        Do One-Time Initialization For GIF Program Account\n                    </button>\n                </div>\n            )\n        }\n        // Otherwise, we're good! Account exists. User can submit GIFs.\n        else {\n            return (\n                <div className=\"connected-container\">\n                    <form\n                        onSubmit={(event) => {\n                            event.preventDefault();\n                            sendAmbigramRequest();\n                        }}\n                    >\n            <input\n                type=\"text\"\n                placeholder=\"Submit Ambigram!\"\n                value={inputValue}\n                onChange={onInputChange}\n            />\n                        <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                            Submit\n                        </button>\n                    </form>\n                    <div className=\"gif-grid\">\n                        {/* We use index as the key instead, also, the src is now item.gifLink */}\n                        {ambigramList.map((item, index) => (\n                            <div className=\"gif-item\" key={index}>\n                                <img src={item.gifLink} alt=\"\"/>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )\n        }\n    }\n\n\n\n    /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n    useEffect(() => {\n        const onLoad = async () => {\n            await checkIfWalletIsConnected();\n        };\n        window.addEventListener('load', onLoad);\n        return () => window.removeEventListener('load', onLoad);\n    }, []);\n\n    const getGifList = async () => {\n        try {\n            const provider = getProvider();\n            const program = new Program(idl, programID, provider);\n            const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n            console.log(\"Got the account\", account)\n            setAmbigramList(account.gifList)\n\n        } catch (error) {\n            console.log(\"Error in getGifs: \", error)\n            setAmbigramList(null);\n        }\n    }\n\n    useEffect(() => {\n        if (walletAddress) {\n            console.log('Fetching GIF list...');\n            getGifList()\n        }\n    }, [walletAddress]);\n\n    return (\n        <div className=\"App\">\n            <div className={walletAddress ? 'authed-container' : 'container'}>\n                <div className=\"header-container\">\n                    <img alt=\"Jason Runcie Ambigram\" src={jrLogo} width=\"500px\" />\n                    <p className=\"sub-text\">\n                        JR Ambigrams\n                    </p>\n                    {!walletAddress && renderNotConnectedContainer()}\n                    {walletAddress && renderConnectedContainer()}\n                </div>\n                <div className=\"footer-container\">\n\n                    <a\n                        className=\"footer-text\"\n                        href={TWITTER_LINK}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                    >{`built on @${TWITTER_HANDLE}`}</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}